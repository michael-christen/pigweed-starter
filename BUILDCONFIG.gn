# Copyright 2020 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

# This BUILDCONFIG file tells GN how to build upstream Pigweed. When starting a
# new project, you'll need to copy this file to your project and then modify it
# to fit your needs. Due to the way Pigweed handles file imports, you won't be
# able to simply import this file in your own BUILDCONFIG.gn.
#
# Keep in mind when importing .gni files that `gn format` will try to
# alphabetically sort imports unless they're separated by comments. For this
# file, import order matters (modules.gni MUST be imported first).

declare_args() {
  # Location of the Pigweed modules directory (defaults to the directory of
  # this file). When copying this buildconfig into a new project, this should
  # be modified to point to the location of the Pigweed repository.
  # NOTE: MODIFICATION = reference location of the Pigweed repository.
  root_dir = get_path_info(get_path_info("BUILDCONFIG.gn", "abspath"), "dir")
  dir_pigweed = "$root_dir/external/pigweed/repo"

  # Path to the Pigweed variables config file for the build target.
  #
  # When this is changed, you must run `ninja -t clean` to remove any files from
  # the previous target's build before building again.
  pw_target_config = "$dir_pigweed/targets/host/target_config.gni"
}

# Import variables that provide paths to modules. Pigweed's GN build requires
# that this file is imported, and it MUST be imported before any other Pigweed
# .gni files (as they depend on the dir_[module] variables).
import("$dir_pigweed/modules.gni")

# Import target configuration. This is what "completes" a Pigweed configuration.
# This file should set a default toolchain, configure pw_executable, select
# backends to build against, and provide target-specific build arguments.
import(pw_target_config)

# Ensure some sort of default toolchain was provided by the target, and then
# set the default toolchain.
assert(pw_target_toolchain != "",
       "Build target must provide its own toolchain.")
set_default_toolchain(pw_target_toolchain)

# Override the built-in build targets to add default compilation options.
# TODO(pwbug/72): Move this code to a .gni file for easier reuse.
template("_pw_override_target_with_defaults") {
  target(invoker._target_type, target_name) {
    forward_variables_from(invoker, "*", [ "_target_type" ])

    # Add a dependency on pw_polyfill, unless this is pw_polyfill.
    if (rebase_path(".") != rebase_path("$dir_pw_polyfill")) {
      if (!defined(public_deps)) {
        public_deps = []
      }
      public_deps += [ "$dir_pw_polyfill:overrides" ]
    }

    if (!defined(configs)) {
      configs = []
    }

    # Add default configs to use for all binary build targets.
    configs += [ "$dir_pw_build:default" ]
  }
}

foreach(_target_type,
        [
          "source_set",
          "executable",
          "shared_library",
          "static_library",
        ]) {
  template(_target_type) {
    _pw_override_target_with_defaults(target_name) {
      forward_variables_from(invoker, "*")
    }
  }
}
